{{> filter_section}}

{{> products_section products = products header=header}}

<script>
	function formatMoney(num){
		var str = num.toString();
		return Array.prototype.reduce.call(str, function(a,b, index){
			return a + ((((str.length - index) % 3 == 0) && (index != 0)) ? "." + b : b);
		}, "");
	}
	function validateMoney(value){
		return ((value.match(/^\d+$/)) || (value == ""));
	}
	document.addEventListener("DOMContentLoaded", function(){
		function sliderControlSetup(elem, leftPosParam, rightPosParam){
			var panel = elem.querySelector(".slider-panel");
			var slider1 = elem.querySelector("#slider-control-1");
			var slider2 = elem.querySelector("#slider-control-2");
			var sliderBar = elem.querySelector("#slider-bar");
			/* Giá trị tối đa và sliderControl đạt được */
			var vmax = panel.offsetWidth - slider1.offsetWidth;

			/* Vị trí con trỏ chuột khi mousedown -> để tính deltaX */
			var xMouseDown = 0;

			/* 	Giá trị của sliderControl trước khi mousemove
				Được khởi tạo với giá trị là % so với width của slider
				Chỉ được cập nhật sau mỗi lần mouseup
				Cộng với deltax để thành currentX */
			var sliderX1 = vmax * 1.0 * leftPosParam / 100; 
			var sliderX2 = vmax * 1.0 * rightPosParam / 100; 

			/* Giá trị của sliderControl được mousedown trước khi mousedown */
			var sliderSelectIndex = 1;
			var sliderXCurrent = sliderX1;

			/* Giá trị của của sliderControl trong trạng thái mousemove */
			var currentX = sliderXCurrent;

			/* Init style */
			slider1.style.transform = "translate("+sliderX1+"px)";
			slider2.style.transform = "translate("+sliderX2+"px)";
			/* Class */
			var classSelect = "selected";

			var idAnimationFrame = 0;
			
			function sliderMouseDownHandler(event){
				xMouseDown = event.screenX;
				currentX = sliderXCurrent + "px";
				idAnimationFrame = window.requestAnimationFrame(refreshSlider);
				document.addEventListener("mousemove", sliderMouseMoveHandler);
				document.addEventListener("mouseup", sliderMouseUpHandler.bind(this));

				this.classList.add("selected");

				event.preventDefault();
			}
			function returnRangeValue(){
				var ret = {};
				if (sliderSelectIndex == 1){
					ret.left = Math.min(sliderX2, parseInt(currentX)) * 1.0 / vmax;
					ret.right = Math.max(sliderX2, parseInt(currentX)) * 1.0 / vmax;
				}
				else{
					ret.left = Math.min(sliderX1, parseInt(currentX)) * 1.0 / vmax;
					ret.right = Math.max(sliderX1, parseInt(currentX)) * 1.0 / vmax;
				}
				return ret;
			}
			function sliderMouseMoveHandler(event){
				var deltaX = event.screenX - xMouseDown;
				if ((sliderXCurrent + deltaX <= vmax) && (sliderXCurrent + deltaX >= 0))
					currentX = sliderXCurrent + deltaX + "px";
				else if (sliderXCurrent + deltaX < 0)
					currentX = "0px";
				else
					currentX = vmax + "px";

				/* Emit change event */
				var changeEvent = new Event("sliderchange");
				changeEvent.range =  returnRangeValue();
				elem.dispatchEvent(changeEvent);
			}
			function refreshSlider(){
				var mins = 0;
				var maxs = 0;
				var x = parseInt(currentX);
				if (sliderSelectIndex == 1){
					mins = Math.min(sliderX2, x);
					maxs = Math.max(sliderX2, x);
					slider1.style.transform = "translateX("+x+"px)";
				}
				else{
					mins = Math.min(sliderX1, x);
					maxs = Math.max(sliderX1, x);
					slider2.style.transform = "translateX("+x+"px)";
				}
				sliderBar.style.left = mins + 8 + "px";
				sliderBar.style.width = maxs-mins + "px";
				idAnimationFrame = window.requestAnimationFrame(refreshSlider);
				
			}
			function sliderMouseUpHandler(event){
				document.removeEventListener("mousemove", sliderMouseMoveHandler);
				document.removeEventListener("mouseup", sliderMouseUpHandler);
				window.cancelAnimationFrame(idAnimationFrame);
				if (sliderSelectIndex == 1)
					sliderX1 = parseInt(currentX);
				else 
					sliderX2 = parseInt(currentX);

				this.classList.remove("selected");

				/* Emit release slider event */
				var changeEvent = new Event("sliderrelease");
				changeEvent.range =  returnRangeValue();
				elem.dispatchEvent(changeEvent);

			}
			slider1.addEventListener("mousedown", function(){ 
				sliderXCurrent = sliderX1;
				sliderSelectIndex = 1;
			});
			slider1.addEventListener("mousedown", sliderMouseDownHandler);

			slider2.addEventListener("mousedown", function(){ 
				sliderXCurrent = sliderX2;
				sliderSelectIndex = 2;
			});
			slider2.addEventListener("mousedown", sliderMouseDownHandler);
		}

		var slider = document.getElementById("slider");
		sliderControlSetup(slider, 0, 100);

		var minTextBar = document.getElementById("min");
		var maxTextBar = document.getElementById("max");

		

		minTextBar.addEventListener("keypress", function(event){
			if (event.key.length < 2){
				var str  = (minTextBar.value).concat(event.key).replace(/\./g, "");
				if (!validateMoney(str)){
					minTextBar.value = _num;
					event.preventDefault();
				}
				else{
					_num = formatMoney(str);
					minTextBar.value = _num;
					event.preventDefault();
				}
			}
		});
		function ajaxJsSimple(method, url, callback){
			var xhr = new XMLHttpRequest();
			xhr.open(method, url, true);
			xhr.onreadystatechange = function(res){
				if ((this.readyState == 4) && (res.status = 200)){
					var resJson = JSON.parse(this.responseText);
					callback(resJson);
				}
			}
			xhr.send();
		}
		/* Price select */
		function updateProducts(elem, json){
			var htmlContent = json.items.map(function(item){
				return `<div class="col-3">
		                    <div class="product-item">
		                        <div class="img-wrapper">
		                            <a href="/product/${item.id}"><img src="${item.images}">
									</a>
		                        </div>
		                        <div class="caption">
		                            <div class="title">${item.name}</div>
		                            <div class="price">${item.price}</div>
		                        </div>
		                    </div>
		                </div>`;
			}).reduce(function(a,b, index){
				return (index % 3 == 0 ? `<div class="w-100"></div>` + a : a).concat(b);
			},"");
			elem.innerHTML = htmlContent;
		}

		/* Duyệt qua trạng thái của các input để xây dựng query*/
		var states = getUpdatedStates();
		var silderquery = "";
		function queryBuilder(){
			var categoryQuery = states[0].reduce(function(a,b){
					if (b.checked)
						return a.concat("&" + b.elem.getAttribute("data-query"));
					else
						return a;
				}, "cat_filter");
			var vendorQuery = states[1].reduce(function(a,b){
					if (b.checked)
						return a.concat("&" + b.elem.getAttribute("data-query"));
					else
						return a;
				}, "vendor_filter");
			var priceQuery =  states[2].reduce(function(a,b){			
					if (b.checked)
						return a.concat("&" + b.elem.value);
					else
						return a;
				}, "price_filter");
			return `${categoryQuery}&${vendorQuery}&${priceQuery}`;
		}

		function getUpdatedStates(){
			return ["category-filter", "vendor-filter", "price-select"].map(function(className){
				return Array.prototype.map.call(document.getElementsByClassName(className),
					function(elem){
						return {"checked": elem.checked, "elem": elem};
					});
			});
		}
		function priceSelectHandler(event){
			states = getUpdatedStates();
			var query = queryBuilder(states).concat("&"+ silderquery);
			console.log(query);
			ajaxJsSimple("GET", `/product/filter?${query}`, function(resJson){
				updateProducts(document.querySelector(".product-view"), resJson);
			});
		}
		
		Array.prototype.forEach.call(document.getElementsByClassName("price-select"), function(elem){
			elem.addEventListener("change", function(){
				silderquery = "";
			});
			elem.addEventListener("change", priceSelectHandler);
		});
		function preventUncheckOnly(event, i){
			if (states[i].every(function(item, index){
				return ((item.checked == false) || (item.elem == event.target));
			})){
				event.stopPropagation();
				event.preventDefault();
			}
		}
		Array.prototype.forEach.call(document.getElementsByClassName("category-filter"), function(elem){
			/* Nhắn người dùng uncheck checkbox duy nhất */
			elem.addEventListener("click", function(event){
				preventUncheckOnly(event, 0);
			});
			elem.addEventListener("change", priceSelectHandler);
		});
		Array.prototype.forEach.call(document.getElementsByClassName("vendor-filter"), function(elem){
			elem.addEventListener("click", function(event){
				preventUncheckOnly(event, 1);
			});
			elem.addEventListener("change", priceSelectHandler);
		});

		var maxVirtualValue = 10000000.0;
		var stepVirtualValue = 5000.0;
		function debounce(fn, t) {
		    var lock = false;
		    var timeoutId = null;
		    return function(event) {
		        if (timeoutId != null)
		            clearTimeout(timeoutId);
		        timeoutId = setTimeout(fn, t, event);
		    }
		}
		function sliderChangeFilterListener(e){
			var from = Math.round(e.range.left*maxVirtualValue);
			var to = Math.round(e.range.right*maxVirtualValue);
			silderquery = `range[from]=${from}&range[to]=${to}`;
			priceSelectHandler();
		}
		var debounceFilterListener = debounce(sliderChangeFilterListener, 200);
		slider.addEventListener("sliderchange", function(e){
			document.getElementById("price-custom").checked = true;
			var money1 = maxVirtualValue * e.range.left / stepVirtualValue;
			var money2 = maxVirtualValue * e.range.right / stepVirtualValue;
			minTextBar.value = formatMoney(Math.ceil(money1) * stepVirtualValue);
			maxTextBar.value = formatMoney(Math.ceil(money2) * stepVirtualValue);
			debounceFilterListener(e);
		});
	});
</script>